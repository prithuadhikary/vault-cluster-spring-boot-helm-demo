# Load the CA certificate along with the private key.
{{ $ca := buildCustomCert (b64enc .Values.caCert) (b64enc .Values.caKey) }}

# Declare $subject of the vault certificate.
{{ $subject := (printf "%s-active.%s.svc.%s" .Release.Name .Release.Namespace .Values.clusterDomain) }}

# Generate a list of SANs for the vault certificate.
{{ $sans := list }}
{{ range $i, $e := until (.Values.vault.server.ha.replicas | int) }}
{{ $sans = append $sans (printf "%s-%d.%s-internal.%s.svc.%s" $.Release.Name $i $.Release.Name $.Release.Namespace $.Values.clusterDomain) }}
{{ end }}

{{ $sans = append $sans $subject }}

# Issue the vault certificate using the $ca as the issuer.
{{ $vaultCert := genSignedCert $subject nil $sans 365 $ca }}

# Issue the app certificate using the $ca as the issuer.
{{ $appCert := genSignedCert "demo-app" nil nil 365 $ca }}

# Create Secret for the vault-cert.
---
apiVersion: v1
kind: Secret
metadata:
  name: vault-cert
type: kubernetes.io/tls
data:
  tls.crt: {{ b64enc $vaultCert.Cert }}
  tls.key: {{ b64enc $vaultCert.Key }}
---
# Create Secret for the app-cert.
apiVersion: v1
kind: Secret
metadata:
  name: app-cert
data:
  tls.crt: {{ b64enc $appCert.Cert }}
  tls.key: {{ b64enc $appCert.Key }}
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-server
data:
  fullchain.pem: {{ b64enc (print $vaultCert.Cert $ca.Cert) }}
  client-auth-ca.pem: {{ b64enc $ca.Cert }}
  server.key: {{ b64enc $vaultCert.Key }}
  server.crt: {{ b64enc $vaultCert.Cert }}